 <main id="main" class="main">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">

<section>
    <div class="container">
        <div class="row">
            <div class="col-md-6 mt-3">
                <h2>Add Product</h2>
                <form action="/admin/addproduct" method="post" enctype="multipart/form-data">
                    <label for="">Product Name</label>
                    <input type="text" name="Name" class="form-control">
                    <br>
                    <label for="">Description</label>
                    <input type="text" name="Description" class="form-control" required>
                    <br>
                    <div class="col-md-6">
                         <label for="">Category</label>
<br>
                <select class="form-select" aria-label="Default select example" name="Category" required>
                                            <option value="">Choose One Category</option>

                    {{#each cat}}
  <option value="{{this.Name}}">{{this.Name}}</option>
  {{/each}}
  
</select>
                    </div>
                    
                    
  
                    
                    <br>
                    
<div class="col-md-6">
                        <label for="">Brand</label>
<br>
                <select class="form-select" aria-label="Default select example" name="brand" required>
                                            <option value="">Choose One Brand</option>

                    {{#each brand}}
  <option value="{{this.brand}}">{{this.brand}}</option>
  {{/each}}
  
</select>
</div>


                    
  
                    <br>
                    <br>
                    <label for="">Size</label>
                    <input type="text" name="Size" class="form-control" required>
                    <br>
                    <label for="">New Price</label>
                    <input type="text" name="NewPrice" class="form-control" required>
                    <br>
                    <label for="">Color</label>
                    <input type="color" name="color" class="form-control" required>
                    <br>
                    <label for="">Stock</label>
                    <input type="number" name="stock" class="form-control" required>
                    <br>
                    <label class="form-label" for="form3Example4cg">Image</label>
                    <br>
                    <img id="uploadPreview0" style="width: 100px; height: auto;" />
                    <img id="uploadPreview1" style="width: 100px; height: auto;" />
                    <img id="uploadPreview2" style="width: 100px; height: auto;" />
                    <img id="uploadPreview3" style="width: 100px; height: auto;" />



                    <br>

                    <input type="file" id="uploadImage" class="form-control form-control" name="file" multiple accept="image/apng, image/avif, image/gif, image/jpeg, image/png, image/svg+xml, image/webp" onchange="PreviewImagezz(event)" data-bs-toggle="modal" data-bs-target="#exampleModal"/>
                 
                  
                    <button type="submit" class="btn btn-success mt-3">Add Product</button>

                </form>
            </div>
        </div>
    </div>
</section>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group row" id="test">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Save changes</button>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    function PreviewImagezz(event) {
        console.log('ggggggggggggggg')
       for (i=0;i<event.target.files.length;i++){
        document.getElementById('uploadPreview'+i).src=URL.createObjectURL(event.target.files[i])
       }
    };

</script>


<script>
    const input = document.getElementById('uploadImage')
    const test = document.getElementById('test')


    input.addEventListener('change', () => {
        
        // Getting image file object from the input variable
        const img_data = []
       // const imagebox = []
       // const crop_btn = []
       // const confirm_btn = []
        
        const url = []
        const length= input.files.length
       
        for (i = 0; i < length; i++) {
          
            test.innerHTML += `<div class="col-4"><div id="image-box${i}" class="image-container" style="height: 350px; width: 350px;"> </div>
    <button class="btn btn-outline-info" id="crop-btn${i}" style="width: 100%; margin-top: 10px; display: block;" type="button">Crop</button> </div>`
        }
        for (i = 0; i < length; i++) {
            img_data[i] = input.files[i]
        }
        
        img_data.forEach((image_data, i) => {
            url[i] = URL.createObjectURL(image_data)
        })
        // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
        // The new object URL represents the specified File object or Blob object.
        url.forEach((url,i)=>{
            document.getElementById('image-box'+i).innerHTML = `<img src="${url}" id="image${i}" style="width:100%;">`
        })
        
        // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.

        // Storing that cropping view image in a variable
  

        // Displaying the image box
        //for(i=0;i<length;i++){
      //      document.getElementById('image-box'+i).style.display= 'block'
      //       document.getElementById('crop-btn'+i).style.display= 'block'
      //  }
       

        for(i=0;i<length;i++){
            cropper(img_data[i],document.getElementById('image'+i),i,document.getElementById('crop-btn'+i),document.getElementById('image-box'+i))
        }

        

        // Creating a croper object with the cropping view image
        // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
        // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
        let container = new DataTransfer();
        let fileInputElement = document.getElementById('uploadImage');



        function cropper(img_data, image, index, crop_btn, imagebox) {

            const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                minCropBoxWidth: 50,
                minCropBoxHeight: 50,
            })

            // When crop button is clicked this event will get triggered
            crop_btn.addEventListener('click', () => {
             
                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {

                    // Gets the original image data
                    // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                    let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                    // Create a new container
                    // Add the cropped image file to the container
                    container.items.add(file);

                    fileInputElement.files = container.files
                    // Replace the original image file with the new cropped image file
                  // Hide the cropper box
                    imagebox.style.display = 'none'
                    // Hide the crop button
                    crop_btn.style.display = 'none'
                });
            }); 
        }
    });
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>

</main>